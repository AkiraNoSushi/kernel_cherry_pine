version: 2.1
jobs:
  build:
   docker:
      - image: ubuntu:latest
   steps:
      - restore_cache:
          keys:
            - v1-apt-cache-{{ checksum "/var/lib/dpkg/available" }}
            - v1-apt-cache-
      - run:
          name: Setting up build environment
          command: |
           # APT cache
           rm /etc/apt/apt.conf.d/docker-clean
           echo "Binary::apt::APT::Keep-Downloaded-Packages \\"1\\";" >> /etc/apt/apt.conf.d/99keep-downloaded
           # Set up build environment
           apt-get update -y
           apt-get upgrade -y
           export DEBIAN_FRONTEND=noninteractive
           ln -fs /usr/share/zoneinfo/UTC /etc/localtime
           apt-get install tzdata -y
           dpkg-reconfigure --frontend noninteractive tzdata
           apt-get install bc bash git-core gnupg gnupg2 build-essential \
           zip curl make automake autogen autoconf autotools-dev libtool shtool python \
           m4 gcc libtool zlib1g-dev flex bison libssl-dev unzip tar xz-utils \
           software-properties-common device-tree-compiler wget ccache -y
           # Fix GitHub SSH key checking
           mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - save_cache:
          key: v1-apt-cache-{{ checksum "/var/lib/dpkg/available" }}
          paths:
            - /var/cache/apt
      - restore_cache:
          keys:
            - v1-source-cache-{{ .Branch }}-{{ .Revision }}
            - v1-source-cache-{{ .Branch }}-
            - v1-source-cache-
      - run: 
          name: Cloning kernel sources
          command: |
            git pull --rebase || git clone --depth 1 --single-branch --recurse-submodules "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH" .
      - save_cache:
          key: v1-source-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/project
      - restore_cache:
          keys:
            - v1-toolchains-clang-{{ .Revision }}
            - v1-toolchains-clang-
      - restore_cache:
          keys:
            - v1-toolchains-gcc-{{ .Revision }}
            - v1-toolchains-gcc-
      - run:
          name: Cloning toolchains
          command: |
           git -C "silont-clang" pull --rebase || git clone https://github.com/silont-project/silont-clang.git --depth=1 --single-branch
           git -C "aarch64-linux-android-4.9" pull --rebase || git clone  https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 --depth=1 --single-branch --branch=android10-mainline-release
      - save_cache:
          key: v1-toolchains-clang-{{ .Revision }}
          paths:
            - ~/project/silont-clang
      - save_cache:
          key: v1-toolchains-gcc-{{ .Revision }}
          paths:
            - ~/project/aarch64-linux-android-4.9
      - restore_cache:
          keys:
            - v1-compiler-cache-{{ .Branch }}-{{ .Revision }}
            - v1-compiler-cache-{{ .Branch }}-
            - v1-compiler-cache-
      - run:
          name: Building
          command: |
           ccache -M 500M
           export ARCH=arm64 && export SUBARCH=arm64 && export DTC_EXT=dtc
           make O=out ARCH=arm64 pine-perf_defconfig
           export PATH="$(pwd)/silont-clang/bin:$(pwd)/aarch64-linux-android-4.9/bin:${PATH}"
           make -j$(nproc --all) O=out \
                                 ARCH=arm64 \
                                 CC="ccache clang" \
                                 CLANG_TRIPLE=aarch64-linux-gnu- \
                                 CROSS_COMPILE=aarch64-linux-android-
           aarch64-linux-gnu-strip --strip-unneeded --strip-debug out/drivers/staging/prima/wlan.ko
      - save_cache:
          key: v1-compiler-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.cache/ccache
            - ~/project/out
      - run:
          name: Creating flashable zip
          command: |
           cp out/drivers/staging/prima/wlan.ko AnyKernel3/modules/vendor/lib/modules/pronto_wlan.ko
           cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
           cp out/arch/arm64/boot/dtbo.img AnyKernel3/
           mkdir -p /tmp/output
           cd AnyKernel3
           export zipfile="/tmp/output/CherryKernel-$(date +%Y%m%d_%H%M).zip"
           zip $zipfile -r *
           curl -F document=@"${zipfile}" "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument?chat_id=${TELEGRAM_CHAT_ID}"
      - store_artifacts:
          path: /tmp/output
workflows:
  version: 2.1
  kernel:
    jobs:
      - build